C51 COMPILER V9.53.0.0   DALLAS                                                            11/29/2023 09:40:35 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE DALLAS
OBJECT MODULE PLACED IN Dallas.OBJ
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE Dallas.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          /*****************************Contrôle Carte Dallas*******************************/
   2          /* 
   3             Nom du fichier : Dallas.c
   4             Auteur : Xavier Champoux, Harold Malbrouck, Charles-Olivier Lemelin
   5          
   6          Version 1.0 25-06-06
   7          Date de modification :  09-11-09
   8           
   9          D 
  10           
  11               
  12              
  13                
  14          *****************************************************************************************/
  15          
  16          //-------------- header files  -----------------
  17          #include "ds89c450.h"       // Définition des bits et des registres du microcontrôleur
  18          #include "Dallas.h"
  19          #include "I2C.h"
  20          
  21          
  22          
  23          // *************************************************************************************************
  24          void vInitPortSerie(void)
  25          //   Auteur : Alain Champagne                  
  26          //      Date de création : 22-06-06   
  27          //   Description : Cette fonction initialise les SFRs pour permettre une communication série
  28          //                 à 57600 bauds sans interruptions. La communication série utilise le timer
  29          //                 1. On ne pourra donc pas utiliser ce timer lorsque la communication série 
  30          //                 sera employée.
  31          //          
  32          //   Paramètres d'entrée : Aucun.
  33          //   Paramètres de sortie : Aucun.                
  34          //   Variables utilisées : Aucun.
  35          //***************************************************************************************************
  36          {
  37   1        SCON0 = 0x50;         // Selectione mode 1, 8-bit avec reception      
  38   1         TMOD  = TMOD | 0x20; // timer 1, mode 2, 8-bit auto reload        
  39   1         TH1   = 0xFF;        // a 11.0592MHz: FA=4800,FD=9600,FE=14400 et FF=28800    
  40   1         PCON  = PCON | 0x80; // Le bit SMOD = 1 pour vitesse * 2 du port serie 
  41   1         TR1   = 1;           // Active le timer 1                          
  42   1         TI_0  = 1;           // Pour pouvoir envoyer un premier charactere    
  43   1      }
  44          
  45          // *************************************************************************************************
  46          // Auteur : Alain Champagne              Date de création : 30-05-2007              
  47          // Modification : Pierre Chouinard 21/08/2009
  48          // Description :  Fonction de transmission d'un octet de donnée 
  49          //                provenant de la mémoire I2C.
  50          //              
  51              
  52          // Paramètres d'entrée :  ucData - Octet à écrire
  53          //                        iAdresse - Addresse où l'on veut écrire dans la mémoire.    
  54          // Paramètres de sortie : Aucun   
  55          //            
C51 COMPILER V9.53.0.0   DALLAS                                                            11/29/2023 09:40:35 PAGE 2   

  56          void vEcrireMemI2C(unsigned char ucData, unsigned int uiAdr)
  57          // *************************************************************************************************
  58          {
  59   1        unsigned char ucTemp;
  60   1        unsigned int i;
  61   1        vI2CStartBit();
  62   1        vI2CEcrire8Bits (0xA0);
  63   1        ucTemp = uiAdr >> 8;
  64   1        vI2CEcrire8Bits (ucTemp);
  65   1        ucTemp = uiAdr;
  66   1        vI2CEcrire8Bits (ucTemp);
  67   1        vI2CEcrire8Bits (ucData); 
  68   1        vI2CStopBit();
  69   1        for(i=0 ; i<5000 ; i++);
  70   1      }
  71          
  72          // *************************************************************************************************
  73          // Auteur : Alain Champagne        Date de création : 30-05-2007              
  74          // Modification : Pierre Chouinard   21/08/2009
  75          //              : François Cardinal  29/08/2018
  76          // Description  : Fonction de réception d'un octet de donnée provenant de la
  77          //                mémoire I2C. Si le circuit ne répond pas, on l'indique
  78          //                à l'écran.  
  79          // Paramètres d'entrée :  iAdr (adresse où l'on veut lire)    
  80          // Paramètres de sortie : ucData (Valeur lue)   
  81          //          
  82          
  83          unsigned char ucLireMemI2C(unsigned int uiAdr)
  84          // *************************************************************************************************
  85          {
  86   1        unsigned char ucTemp;
  87   1        unsigned char ucRecu;
  88   1        vI2CStartBit();
  89   1        vI2CEcrire8Bits(0xA0);
  90   1        ucTemp = uiAdr >> 8;
  91   1        vI2CEcrire8Bits (ucTemp);
  92   1        ucTemp = uiAdr;
  93   1        vI2CEcrire8Bits (ucTemp); 
  94   1        vI2CStopBit();
  95   1        vI2CStartBit();
  96   1        vI2CEcrire8Bits(0xA1);
  97   1        ucRecu = ucI2CLire8Bits(1);
  98   1        vI2CStopBit();
  99   1        return ucRecu;
 100   1      }
 101          
 102          // ************************************************************************************************
 103          void vInitTimer0(void)
 104          //
 105          //  Auteur: Stéphane Deschênes  
 106          //  Date de création :  24 sept 2019
 107          //  Version 1.0
 108          //
 109          //  Description: Initialise le timer 0 pour qu'il fonctionne sur 16 bits
 110          //  Paramètres d'entrées : Aucun
 111          //  Paramètres de sortie : Aucun
 112          //  Notes                : Aucun
 113          //
 114          // ************************************************************************************************
 115          {
 116   1        TMOD |= 0x01;        //0x01 set le timer 0 as a 16-bit timer
 117   1        TH0   = 0x4C;        //Initialize le timer 0 pour 10ms
C51 COMPILER V9.53.0.0   DALLAS                                                            11/29/2023 09:40:35 PAGE 3   

 118   1        TL0   = 0x00;
 119   1        TR0   = 1;           //start timer 0
 120   1        TF0   = 0;
 121   1      }
 122          
 123          // ************************************************************************************************
 124          void vInitIntTimer0(void)
 125          //
 126          //  Auteur: Stéphane Deschênes  
 127          //  Date de création :  24 sept 2019
 128          //  Version 1.0
 129          //
 130          //  Description: active l'interuption du timer 0
 131          //  Paramètres d'entrées : Aucun
 132          //  Paramètres de sortie : Aucun
 133          //  Notes                : Aucun
 134          //
 135          // ************************************************************************************************
 136          {
 137   1        TF0 = 1;          //Enable timer 0 interruption
 138   1      }
 139          // ************************************************************************************************


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    129    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       6
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
